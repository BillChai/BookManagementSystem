import org.jooq.meta.jaxb.Logging

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'nu.studer.jooq' version '8.2'
    id("org.flywaydb.flyway") version "8.0.1" //これも追加
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // db
    runtimeOnly 'org.postgresql:postgresql'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.h2database:h2") // In-memory database for testing
    testImplementation("org.jooq:jooq")
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // jooq generator
    jooqGenerator 'org.postgresql:postgresql:42.7.2'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jooq {
    version = '3.18.4'

    configurations {
        main {
            generateSchemaSourceOnCompilation = true
            generationTool {
                logging = Logging.DEBUG
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/mydatabase'
                    user = 'myuser'
                    password = 'secret'
                }
                generator {
                    name = 'org.jooq.codegen.KotlinGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {}
                    target {
                        packageName = 'org.jooq.model'
                        directory = './build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

flyway {
    url = "jdbc:postgresql://localhost:5432/mydatabase"
    user = "myuser"
    password = "secret"
}